Задание 1) Напишите функцию с использованием регулярных выражений, которая принимает строку, и выдаёт все найденные номера автомобиля в виде массива строк. Номера автомобилей, которые соответствуют формату wNNNww, где w – буква, N – цифра.. 
Пример:
Аргумент функции: "А012АА  а вот корявый номер A3AA3A теперь нормальный номер Е102СН и такой номер А100АМ"
Вывод функции: ["А012АА", "Е102СН", "А100АМ"]

Random rand = new Random();
rand.nextInt()

Random.nextInt()

class Main {
	public static void main(String[] args) {
		findAllPlateNumbers()
	}

	static String[] findAllPlateNumbers(String text) {

	} 
}

static String[] findAllPlateNumbers(String text) {
	Pattern plateNumberPattern = Pattern.compile("\\d{3}");
	Matcher m = plateNumberPattern.matcher(text);

	int counter = 0;
	while(m.find()) {
		counter++;
	}

	String[] result = new String[counter]

	// Сброс указателя внутри матчера
	m.reset();

	int index = 0;
	while(m.find()) {
		result[index] = m.group();
		index++;
	}
}



Абстракция
Выделение значимых свойств и поведения объектов, которые необходимы для решения нашей задачи

User
// Важны
	- username
	- password
	- Фамилия
	- Имя
	- ОТчество
	- Год рождения
// Не важны
	- группу крови
	- размер

Наследование
	Способность класса получать свойства и поведение другого класса

Наследования одного класса другим, делается с помощью ключевого слова extends

Пример:
public class Client extends User {
	// some code
}

super() - обращение к методу/конструктору базового (родительского класса)

public Client(String username, String password, String firstName, String secondName, String phoneNumber, String address) {
        super(username, password); // <------
        this.firstName = firstName;
        this.secondName = secondName;
        this.phoneNumber = phoneNumber;
        this.address = address;
        this.balance = 0.0; // бесполезная строка, потому что 0 по умолчанию
    }


Инкапсуляция
Сокрытие деталей реализации или защита от внешнего измения состояни объекта

Примеры:
Один из вариантов это контроль изменения полей с помощью геттеров и сеттеров (методы доступа к полям объекта)

Изменение состояния с помощью определённых методов (пример из репо - функция transfer)


Модификаторы доступа - можно установить на поля, классы, методы и конструкторы
public - то мы можем обратиться извне, в пакете, в наследниках и внутри класса
private - можем обратиться только внутри класса
protected - можем обратиться внутри класса и в дочерних классах
(package private) - можем обратиться внутри класса и в дочерних классах и в рамках одного пакета

Полиморфизм
Полиморфизм – это способность программы идентично использовать объекты с одинаковым интерфейсом без информации о конкретном типе этого объекта. 
- Позволяет подменять реализации объектов. На этом основано тестирование.
- Обеспечивает расширяемость программы — становится гораздо легче создавать задел на будущее. Добавление новых типов на основе существующих — наиболее частый способ расширения функциональности программ, написанных в ООП стиле.
- Позволяет объединять объекты с общим типом или поведением в одну коллекцию или массив и управлять ими единообразно (как в наших примерах, заставляя всех танцевать – метод dance или плыть – метод swim).
- Гибкость при создании новых типов: вы можете выбирать реализацию метода из родителя или переопределить его в потомке.